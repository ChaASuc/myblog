<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deschen.myblog.modules.system.mapper.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.deschen.myblog.modules.system.entity.Article">
    <id column="article_id" jdbcType="BIGINT" property="articleId" />
    <result column="article_title" jdbcType="VARCHAR" property="articleTitle" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="category_id" jdbcType="BIGINT" property="categoryId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.deschen.myblog.modules.system.entity.ArticleWithBLOBs">
    <result column="article_html" jdbcType="LONGVARCHAR" property="articleHtml" />
    <result column="article_content" jdbcType="LONGVARCHAR" property="articleContent" />
  </resultMap>

  <!--自定义-->
  <resultMap extends="BaseResultMap" id="ResultMapDto" type="com.deschen.myblog.modules.system.dto.ArticleDto">
    <result column="category_name" jdbcType="VARCHAR" property="categoryName" />
    <result column="thumbup_count" jdbcType="INTEGER" property="thumbupCount" />
    <result column="visit_count" jdbcType="INTEGER" property="visitCount" />
    <result column="comment_count" jdbcType="INTEGER" property="commentCount" />
    <!--<collection property="tags" ofType="com.deschen.myblog.modules.system.entity.Tag" >
      <id column="tag_id" jdbcType="BIGINT" property="tagId" />
      <result column="tag_name" jdbcType="VARCHAR" property="tagName" />
      <result column="state" jdbcType="TINYINT" property="state" />
      <result column="hot" jdbcType="INTEGER" property="hot" />
      <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
      <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
      <result column="category_id" jdbcType="BIGINT" property="categoryId" />
    </collection>-->
  </resultMap>
  <resultMap extends="ResultMapWithBLOBs" id="ResultMapWithBLOBsDto" type="com.deschen.myblog.modules.system.dto.ArticleWithBLOBsDto">
    <result column="category_name" jdbcType="VARCHAR" property="categoryName" />
    <result column="thumbup_count" jdbcType="INTEGER" property="thumbupCount" />
    <result column="visit_count" jdbcType="INTEGER" property="visitCount" />
    <result column="comment_count" jdbcType="INTEGER" property="commentCount" />
    <!--<collection property="tags" ofType="com.deschen.myblog.modules.system.entity.Tag" >
      <id column="tag_id" jdbcType="BIGINT" property="tagId" />
      <result column="tag_name" jdbcType="VARCHAR" property="tagName" />
      <result column="state" jdbcType="TINYINT" property="state" />
      <result column="hot" jdbcType="INTEGER" property="hot" />
      <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
      <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
      <result column="category_id" jdbcType="BIGINT" property="categoryId" />
    </collection>-->
  </resultMap>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    article_id, article_title, state, category_id, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    article_html, article_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.deschen.myblog.modules.system.entity.ArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.deschen.myblog.modules.system.entity.ArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    where article_id = #{articleId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blog_article
    where article_id = #{articleId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.deschen.myblog.modules.system.entity.ArticleExample">
    delete from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.deschen.myblog.modules.system.entity.ArticleWithBLOBs">
    insert into blog_article (article_id, article_title, state, 
      category_id, create_time, update_time, 
      article_html, article_content)
    values (#{articleId,jdbcType=BIGINT}, #{articleTitle,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT}, 
      #{categoryId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{articleHtml,jdbcType=LONGVARCHAR}, #{articleContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.deschen.myblog.modules.system.entity.ArticleWithBLOBs">
    insert into blog_article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        article_id,
      </if>
      <if test="articleTitle != null">
        article_title,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="articleHtml != null">
        article_html,
      </if>
      <if test="articleContent != null">
        article_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        #{articleId,jdbcType=BIGINT},
      </if>
      <if test="articleTitle != null">
        #{articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleHtml != null">
        #{articleHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="articleContent != null">
        #{articleContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.deschen.myblog.modules.system.entity.ArticleExample" resultType="java.lang.Long">
    select count(*) from blog_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <select id="selectArticleDtoByCategoryIdSortDesc" parameterType="map" resultMap="ResultMapDto">
    SELECT article.*, category_name, visit_count, thumbup_count, comment_count
    FROM blog_article article
    LEFT JOIN blog_category category
    on article.category_id = category.category_id
    LEFT JOIN blog_visit visit
    on article.article_id = visit.article_id
    LEFT JOIN blog_comment comment
    on article.article_id = comment.article_id
    LEFT JOIN blog_thumbup thumbup
    on article.article_id = thumbup.article_id
    WHERE category.category_id = #{categoryId}
    and article.state in
    <foreach collection="states" open="(" separator="," close=")" item="state">
      #{state}
    </foreach>
    <if test="sort == null">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'hot'">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'newest'">
      ORDER BY article.update_time DESC
    </if>
    <if test="sort == 'comment'">
      ORDER BY comment.comment_count DESC
    </if>
  </select>


  <select id="selectArticleDtoByCategoryIdAndTagIdSortDesc" parameterType="map" resultMap="ResultMapDto">
    SELECT article.*, category_name, visit_count, thumbup_count, comment_count
    FROM blog_article article
    LEFT JOIN blog_category category
    on article.category_id = category.category_id
    LEFT JOIN blog_visit visit
    on article.article_id = visit.article_id
    LEFT JOIN blog_comment comment
    on article.article_id = comment.article_id
    LEFT JOIN blog_thumbup thumbup
    on article.article_id = thumbup.article_id
    LEFT JOIN blog_tag_article tag_article
    on article.article_id = tag_article.article_id
    WHERE category.category_id = #{categoryId}
    and tag_article.tag_id = #{tagId}
    and article.state in
    <foreach collection="states" open="(" separator="," close=")" item="state">
      #{state}
    </foreach>
    <if test="sort == null">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'hot'">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'newest'">
      ORDER BY article.update_time DESC
    </if>
    <if test="sort == 'comment'">
      ORDER BY comment.comment_count DESC
    </if>
  </select>

  <select id="selectArticleDtoByTagIdSortDesc" parameterType="map" resultMap="ResultMapDto">
    SELECT article.*, category_name, visit_count, thumbup_count, comment_count
    FROM blog_article article
    LEFT JOIN blog_category category
    on article.category_id = category.category_id
    LEFT JOIN blog_visit visit
    on article.article_id = visit.article_id
    LEFT JOIN blog_comment comment
    on article.article_id = comment.article_id
    LEFT JOIN blog_thumbup thumbup
    on article.article_id = thumbup.article_id
    LEFT JOIN blog_tag_article tag_article
    on article.article_id = tag_article.article_id
    WHERE tag_article.tag_id in
    (
    SELECT tag_id
    FROM blog_tag tag
    WHERE tag.tag_name = (SELECT tag_name FROM blog_tag WHERE tag_id = #{tagId})
    )
    and article.state in
    <foreach collection="states" open="(" separator="," close=")" item="state">
      #{state}
    </foreach>
    <if test="sort == null">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'hot'">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'newest'">
      ORDER BY article.update_time DESC
    </if>
    <if test="sort == 'comment'">
      ORDER BY comment.comment_count DESC
    </if>
  </select>

  <select id="selectArticleDtoSortDesc" parameterType="map" resultMap="ResultMapDto">
    SELECT article.*, category_name, visit_count, thumbup_count, comment_count
    FROM blog_article article
    LEFT JOIN blog_category category
    on article.category_id = category.category_id
    LEFT JOIN blog_visit visit
    on article.article_id = visit.article_id
    LEFT JOIN blog_comment comment
    on article.article_id = comment.article_id
    LEFT JOIN blog_thumbup thumbup
    on article.article_id = thumbup.article_id
    LEFT JOIN blog_tag_article tag_article
    on article.article_id = tag_article.article_id
    WHERE article_state in
    <foreach collection="states" open="(" separator="," close=")" item="state">
      #{state}
    </foreach>
    <if test="sort == null">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'hot'">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'newest'">
      ORDER BY article.update_time DESC
    </if>
    <if test="sort == 'comment'">
      ORDER BY comment.comment_count DESC
    </if>
  </select>

  <select id="selectArticleDtoByCategoryIdsSortDesc" parameterType="map" resultMap="ResultMapDto">
    SELECT article.*, category_name, visit_count, thumbup_count, comment_count
    FROM blog_article article
    LEFT JOIN blog_category category
    on article.category_id = category.category_id
    LEFT JOIN blog_visit visit
    on article.article_id = visit.article_id
    LEFT JOIN blog_comment comment
    on article.article_id = comment.article_id
    LEFT JOIN blog_thumbup thumbup
    on article.article_id = thumbup.article_id
    WHERE category.category_id in
    <foreach collection="categoryIds" open="(" separator="," close=")" item="categoryId">
      #{categoryId}
    </foreach>
    and article.state in
    <foreach collection="states" open="(" separator="," close=")" item="state">
      #{state}
    </foreach>
    <if test="sort == null">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'hot'">
      ORDER BY visit.visit_count,thumbup.thumbup_count,comment.comment_count DESC
    </if>
    <if test="sort == 'newest'">
      ORDER BY article.update_time DESC
    </if>
    <if test="sort == 'comment'">
      ORDER BY comment.comment_count DESC
    </if>
  </select>

  <select id="selectArticleWithBLOBsDtoByArticleId" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBsDto">
    SELECT article.*, category_name, visit_count, thumbup_count, comment_count
    FROM blog_article article
    LEFT JOIN blog_category category
    on article.category_id = category.category_id
    LEFT JOIN blog_visit visit
    on article.article_id = visit.article_id
    LEFT JOIN blog_comment comment
    on article.article_id = comment.article_id
    LEFT JOIN blog_thumbup thumbup
    on article.article_id = thumbup.article_id
    WHERE article.article_id = #{articleId}
  </select>

  <update id="updateByExampleSelective" parameterType="map">
    update blog_article
    <set>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=BIGINT},
      </if>
      <if test="record.articleTitle != null">
        article_title = #{record.articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.articleHtml != null">
        article_html = #{record.articleHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.articleContent != null">
        article_content = #{record.articleContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blog_article
    set article_id = #{record.articleId,jdbcType=BIGINT},
      article_title = #{record.articleTitle,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=TINYINT},
      category_id = #{record.categoryId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      article_html = #{record.articleHtml,jdbcType=LONGVARCHAR},
      article_content = #{record.articleContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog_article
    set article_id = #{record.articleId,jdbcType=BIGINT},
      article_title = #{record.articleTitle,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=TINYINT},
      category_id = #{record.categoryId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.deschen.myblog.modules.system.entity.ArticleWithBLOBs">
    update blog_article
    <set>
      <if test="articleTitle != null">
        article_title = #{articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleHtml != null">
        article_html = #{articleHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="articleContent != null">
        article_content = #{articleContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.deschen.myblog.modules.system.entity.ArticleWithBLOBs">
    update blog_article
    set article_title = #{articleTitle,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      category_id = #{categoryId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      article_html = #{articleHtml,jdbcType=LONGVARCHAR},
      article_content = #{articleContent,jdbcType=LONGVARCHAR}
    where article_id = #{articleId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deschen.myblog.modules.system.entity.Article">
    update blog_article
    set article_title = #{articleTitle,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      category_id = #{categoryId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where article_id = #{articleId,jdbcType=BIGINT}
  </update>
</mapper>